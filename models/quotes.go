// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Quote is an object representing the database table.
type Quote struct {
	ID         string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	Quote      null.String       `boil:"quote" json:"quote,omitempty" toml:"quote" yaml:"quote,omitempty"`
	Characters null.String       `boil:"characters" json:"characters,omitempty" toml:"characters" yaml:"characters,omitempty"`
	Stardate   types.NullDecimal `boil:"stardate" json:"stardate,omitempty" toml:"stardate" yaml:"stardate,omitempty"`
	EpisodeID  string            `boil:"episode_id" json:"episode_id" toml:"episode_id" yaml:"episode_id"`
	CreatedAt  time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *quoteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L quoteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var QuoteColumns = struct {
	ID         string
	Quote      string
	Characters string
	Stardate   string
	EpisodeID  string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	Quote:      "quote",
	Characters: "characters",
	Stardate:   "stardate",
	EpisodeID:  "episode_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

// Generated where

var QuoteWhere = struct {
	ID         whereHelperstring
	Quote      whereHelpernull_String
	Characters whereHelpernull_String
	Stardate   whereHelpertypes_NullDecimal
	EpisodeID  whereHelperstring
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: `id`},
	Quote:      whereHelpernull_String{field: `quote`},
	Characters: whereHelpernull_String{field: `characters`},
	Stardate:   whereHelpertypes_NullDecimal{field: `stardate`},
	EpisodeID:  whereHelperstring{field: `episode_id`},
	CreatedAt:  whereHelpertime_Time{field: `created_at`},
	UpdatedAt:  whereHelpertime_Time{field: `updated_at`},
}

// QuoteRels is where relationship names are stored.
var QuoteRels = struct {
	Episode string
}{
	Episode: "Episode",
}

// quoteR is where relationships are stored.
type quoteR struct {
	Episode *Episode
}

// NewStruct creates a new relationship struct
func (*quoteR) NewStruct() *quoteR {
	return &quoteR{}
}

// quoteL is where Load methods for each relationship are stored.
type quoteL struct{}

var (
	quoteColumns               = []string{"id", "quote", "characters", "stardate", "episode_id", "created_at", "updated_at"}
	quoteColumnsWithoutDefault = []string{"quote", "characters", "stardate", "episode_id", "created_at", "updated_at"}
	quoteColumnsWithDefault    = []string{"id"}
	quotePrimaryKeyColumns     = []string{"id"}
)

type (
	// QuoteSlice is an alias for a slice of pointers to Quote.
	// This should generally be used opposed to []Quote.
	QuoteSlice []*Quote
	// QuoteHook is the signature for custom Quote hook methods
	QuoteHook func(context.Context, boil.ContextExecutor, *Quote) error

	quoteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	quoteType                 = reflect.TypeOf(&Quote{})
	quoteMapping              = queries.MakeStructMapping(quoteType)
	quotePrimaryKeyMapping, _ = queries.BindMapping(quoteType, quoteMapping, quotePrimaryKeyColumns)
	quoteInsertCacheMut       sync.RWMutex
	quoteInsertCache          = make(map[string]insertCache)
	quoteUpdateCacheMut       sync.RWMutex
	quoteUpdateCache          = make(map[string]updateCache)
	quoteUpsertCacheMut       sync.RWMutex
	quoteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var quoteBeforeInsertHooks []QuoteHook
var quoteBeforeUpdateHooks []QuoteHook
var quoteBeforeDeleteHooks []QuoteHook
var quoteBeforeUpsertHooks []QuoteHook

var quoteAfterInsertHooks []QuoteHook
var quoteAfterSelectHooks []QuoteHook
var quoteAfterUpdateHooks []QuoteHook
var quoteAfterDeleteHooks []QuoteHook
var quoteAfterUpsertHooks []QuoteHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Quote) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range quoteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Quote) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range quoteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Quote) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range quoteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Quote) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range quoteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Quote) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range quoteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Quote) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range quoteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Quote) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range quoteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Quote) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range quoteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Quote) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range quoteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddQuoteHook registers your hook function for all future operations.
func AddQuoteHook(hookPoint boil.HookPoint, quoteHook QuoteHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		quoteBeforeInsertHooks = append(quoteBeforeInsertHooks, quoteHook)
	case boil.BeforeUpdateHook:
		quoteBeforeUpdateHooks = append(quoteBeforeUpdateHooks, quoteHook)
	case boil.BeforeDeleteHook:
		quoteBeforeDeleteHooks = append(quoteBeforeDeleteHooks, quoteHook)
	case boil.BeforeUpsertHook:
		quoteBeforeUpsertHooks = append(quoteBeforeUpsertHooks, quoteHook)
	case boil.AfterInsertHook:
		quoteAfterInsertHooks = append(quoteAfterInsertHooks, quoteHook)
	case boil.AfterSelectHook:
		quoteAfterSelectHooks = append(quoteAfterSelectHooks, quoteHook)
	case boil.AfterUpdateHook:
		quoteAfterUpdateHooks = append(quoteAfterUpdateHooks, quoteHook)
	case boil.AfterDeleteHook:
		quoteAfterDeleteHooks = append(quoteAfterDeleteHooks, quoteHook)
	case boil.AfterUpsertHook:
		quoteAfterUpsertHooks = append(quoteAfterUpsertHooks, quoteHook)
	}
}

// One returns a single quote record from the query.
func (q quoteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Quote, error) {
	o := &Quote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for quotes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Quote records from the query.
func (q quoteQuery) All(ctx context.Context, exec boil.ContextExecutor) (QuoteSlice, error) {
	var o []*Quote

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Quote slice")
	}

	if len(quoteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Quote records in the query.
func (q quoteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count quotes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q quoteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if quotes exists")
	}

	return count > 0, nil
}

// Episode pointed to by the foreign key.
func (o *Quote) Episode(mods ...qm.QueryMod) episodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.EpisodeID),
	}

	queryMods = append(queryMods, mods...)

	query := Episodes(queryMods...)
	queries.SetFrom(query.Query, "\"episodes\"")

	return query
}

// LoadEpisode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (quoteL) LoadEpisode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQuote interface{}, mods queries.Applicator) error {
	var slice []*Quote
	var object *Quote

	if singular {
		object = maybeQuote.(*Quote)
	} else {
		slice = *maybeQuote.(*[]*Quote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &quoteR{}
		}
		args = append(args, object.EpisodeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &quoteR{}
			}

			for _, a := range args {
				if a == obj.EpisodeID {
					continue Outer
				}
			}

			args = append(args, obj.EpisodeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`episodes`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Episode")
	}

	var resultSlice []*Episode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Episode")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for episodes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for episodes")
	}

	if len(quoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Episode = foreign
		if foreign.R == nil {
			foreign.R = &episodeR{}
		}
		foreign.R.Quotes = append(foreign.R.Quotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EpisodeID == foreign.ID {
				local.R.Episode = foreign
				if foreign.R == nil {
					foreign.R = &episodeR{}
				}
				foreign.R.Quotes = append(foreign.R.Quotes, local)
				break
			}
		}
	}

	return nil
}

// SetEpisode of the quote to the related item.
// Sets o.R.Episode to related.
// Adds o to related.R.Quotes.
func (o *Quote) SetEpisode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Episode) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"quotes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"episode_id"}),
		strmangle.WhereClause("\"", "\"", 2, quotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EpisodeID = related.ID
	if o.R == nil {
		o.R = &quoteR{
			Episode: related,
		}
	} else {
		o.R.Episode = related
	}

	if related.R == nil {
		related.R = &episodeR{
			Quotes: QuoteSlice{o},
		}
	} else {
		related.R.Quotes = append(related.R.Quotes, o)
	}

	return nil
}

// Quotes retrieves all the records using an executor.
func Quotes(mods ...qm.QueryMod) quoteQuery {
	mods = append(mods, qm.From("\"quotes\""))
	return quoteQuery{NewQuery(mods...)}
}

// FindQuote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindQuote(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Quote, error) {
	quoteObj := &Quote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"quotes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, quoteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from quotes")
	}

	return quoteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Quote) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no quotes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(quoteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	quoteInsertCacheMut.RLock()
	cache, cached := quoteInsertCache[key]
	quoteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			quoteColumns,
			quoteColumnsWithDefault,
			quoteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(quoteType, quoteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(quoteType, quoteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"quotes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"quotes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into quotes")
	}

	if !cached {
		quoteInsertCacheMut.Lock()
		quoteInsertCache[key] = cache
		quoteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Quote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Quote) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	quoteUpdateCacheMut.RLock()
	cache, cached := quoteUpdateCache[key]
	quoteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			quoteColumns,
			quotePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update quotes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"quotes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, quotePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(quoteType, quoteMapping, append(wl, quotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update quotes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for quotes")
	}

	if !cached {
		quoteUpdateCacheMut.Lock()
		quoteUpdateCache[key] = cache
		quoteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q quoteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for quotes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for quotes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o QuoteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), quotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"quotes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, quotePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in quote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all quote")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Quote) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no quotes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(quoteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	quoteUpsertCacheMut.RLock()
	cache, cached := quoteUpsertCache[key]
	quoteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			quoteColumns,
			quoteColumnsWithDefault,
			quoteColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			quoteColumns,
			quotePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert quotes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(quotePrimaryKeyColumns))
			copy(conflict, quotePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"quotes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(quoteType, quoteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(quoteType, quoteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert quotes")
	}

	if !cached {
		quoteUpsertCacheMut.Lock()
		quoteUpsertCache[key] = cache
		quoteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Quote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Quote) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Quote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), quotePrimaryKeyMapping)
	sql := "DELETE FROM \"quotes\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from quotes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for quotes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q quoteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no quoteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from quotes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for quotes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o QuoteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Quote slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(quoteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), quotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"quotes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, quotePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from quote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for quotes")
	}

	if len(quoteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Quote) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindQuote(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *QuoteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := QuoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), quotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"quotes\".* FROM \"quotes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, quotePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in QuoteSlice")
	}

	*o = slice

	return nil
}

// QuoteExists checks if the Quote row exists.
func QuoteExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"quotes\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if quotes exists")
	}

	return exists, nil
}
