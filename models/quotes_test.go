// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testQuotes(t *testing.T) {
	t.Parallel()

	query := Quotes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testQuotesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Quote{}
	if err = randomize.Struct(seed, o, quoteDBTypes, true, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Quotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQuotesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Quote{}
	if err = randomize.Struct(seed, o, quoteDBTypes, true, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Quotes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Quotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQuotesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Quote{}
	if err = randomize.Struct(seed, o, quoteDBTypes, true, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QuoteSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Quotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQuotesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Quote{}
	if err = randomize.Struct(seed, o, quoteDBTypes, true, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := QuoteExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Quote exists: %s", err)
	}
	if !e {
		t.Errorf("Expected QuoteExists to return true, but got false.")
	}
}

func testQuotesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Quote{}
	if err = randomize.Struct(seed, o, quoteDBTypes, true, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	quoteFound, err := FindQuote(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if quoteFound == nil {
		t.Error("want a record, got nil")
	}
}

func testQuotesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Quote{}
	if err = randomize.Struct(seed, o, quoteDBTypes, true, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Quotes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testQuotesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Quote{}
	if err = randomize.Struct(seed, o, quoteDBTypes, true, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Quotes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testQuotesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	quoteOne := &Quote{}
	quoteTwo := &Quote{}
	if err = randomize.Struct(seed, quoteOne, quoteDBTypes, false, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}
	if err = randomize.Struct(seed, quoteTwo, quoteDBTypes, false, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = quoteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = quoteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Quotes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testQuotesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	quoteOne := &Quote{}
	quoteTwo := &Quote{}
	if err = randomize.Struct(seed, quoteOne, quoteDBTypes, false, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}
	if err = randomize.Struct(seed, quoteTwo, quoteDBTypes, false, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = quoteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = quoteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Quotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func quoteBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Quote) error {
	*o = Quote{}
	return nil
}

func quoteAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Quote) error {
	*o = Quote{}
	return nil
}

func quoteAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Quote) error {
	*o = Quote{}
	return nil
}

func quoteBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Quote) error {
	*o = Quote{}
	return nil
}

func quoteAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Quote) error {
	*o = Quote{}
	return nil
}

func quoteBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Quote) error {
	*o = Quote{}
	return nil
}

func quoteAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Quote) error {
	*o = Quote{}
	return nil
}

func quoteBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Quote) error {
	*o = Quote{}
	return nil
}

func quoteAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Quote) error {
	*o = Quote{}
	return nil
}

func testQuotesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Quote{}
	o := &Quote{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, quoteDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Quote object: %s", err)
	}

	AddQuoteHook(boil.BeforeInsertHook, quoteBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	quoteBeforeInsertHooks = []QuoteHook{}

	AddQuoteHook(boil.AfterInsertHook, quoteAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	quoteAfterInsertHooks = []QuoteHook{}

	AddQuoteHook(boil.AfterSelectHook, quoteAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	quoteAfterSelectHooks = []QuoteHook{}

	AddQuoteHook(boil.BeforeUpdateHook, quoteBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	quoteBeforeUpdateHooks = []QuoteHook{}

	AddQuoteHook(boil.AfterUpdateHook, quoteAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	quoteAfterUpdateHooks = []QuoteHook{}

	AddQuoteHook(boil.BeforeDeleteHook, quoteBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	quoteBeforeDeleteHooks = []QuoteHook{}

	AddQuoteHook(boil.AfterDeleteHook, quoteAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	quoteAfterDeleteHooks = []QuoteHook{}

	AddQuoteHook(boil.BeforeUpsertHook, quoteBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	quoteBeforeUpsertHooks = []QuoteHook{}

	AddQuoteHook(boil.AfterUpsertHook, quoteAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	quoteAfterUpsertHooks = []QuoteHook{}
}

func testQuotesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Quote{}
	if err = randomize.Struct(seed, o, quoteDBTypes, true, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Quotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQuotesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Quote{}
	if err = randomize.Struct(seed, o, quoteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(quoteColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Quotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQuoteToOneEpisodeUsingEpisode(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Quote
	var foreign Episode

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, quoteDBTypes, false, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, episodeDBTypes, false, episodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Episode struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EpisodeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Episode().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := QuoteSlice{&local}
	if err = local.L.LoadEpisode(ctx, tx, false, (*[]*Quote)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Episode == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Episode = nil
	if err = local.L.LoadEpisode(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Episode == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testQuoteToOneSetOpEpisodeUsingEpisode(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Quote
	var b, c Episode

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, quoteDBTypes, false, strmangle.SetComplement(quotePrimaryKeyColumns, quoteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, episodeDBTypes, false, strmangle.SetComplement(episodePrimaryKeyColumns, episodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, episodeDBTypes, false, strmangle.SetComplement(episodePrimaryKeyColumns, episodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Episode{&b, &c} {
		err = a.SetEpisode(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Episode != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Quotes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EpisodeID != x.ID {
			t.Error("foreign key was wrong value", a.EpisodeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EpisodeID))
		reflect.Indirect(reflect.ValueOf(&a.EpisodeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EpisodeID != x.ID {
			t.Error("foreign key was wrong value", a.EpisodeID, x.ID)
		}
	}
}

func testQuotesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Quote{}
	if err = randomize.Struct(seed, o, quoteDBTypes, true, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQuotesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Quote{}
	if err = randomize.Struct(seed, o, quoteDBTypes, true, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QuoteSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQuotesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Quote{}
	if err = randomize.Struct(seed, o, quoteDBTypes, true, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Quotes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	quoteDBTypes = map[string]string{`ID`: `uuid`, `Quote`: `string`, `Characters`: `string`, `Stardate`: `decimal`, `EpisodeID`: `uuid`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`}
	_            = bytes.MinRead
)

func testQuotesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(quotePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(quoteColumns) == len(quotePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Quote{}
	if err = randomize.Struct(seed, o, quoteDBTypes, true, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Quotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, quoteDBTypes, true, quotePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testQuotesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(quoteColumns) == len(quotePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Quote{}
	if err = randomize.Struct(seed, o, quoteDBTypes, true, quoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Quotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, quoteDBTypes, true, quotePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(quoteColumns, quotePrimaryKeyColumns) {
		fields = quoteColumns
	} else {
		fields = strmangle.SetComplement(
			quoteColumns,
			quotePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := QuoteSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testQuotesUpsert(t *testing.T) {
	t.Parallel()

	if len(quoteColumns) == len(quotePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Quote{}
	if err = randomize.Struct(seed, &o, quoteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Quote: %s", err)
	}

	count, err := Quotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, quoteDBTypes, false, quotePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Quote struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Quote: %s", err)
	}

	count, err = Quotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
